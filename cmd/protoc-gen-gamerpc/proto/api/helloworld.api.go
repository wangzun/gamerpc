// Code generated by gamerpc. DO NOT EDIT.
package api

import (
	"context"
	"errors"
	pb "gamerpc/proto/pb"
)

const (
	CALL int = 0
	CAST int = 1
)

// MethodDesc represents an GameRPC service's method specification.
type MethodDesc struct {
	MethodName  string
	CallHandler callHandler
	CastHandler castHandler
	Type        int
	Act         uint8
}

// ServiceDesc represents an GameRPC service's specification.
type ServiceDesc struct {
	ServiceName string
	Methods     []MethodDesc
	Cmd         uint8
	HandlerType interface{}
}

type Router struct {
	Url string
	Cmd uint8
	Act uint8
}

type ServiceRegistrar interface {
	RegisterService(desc *ServiceDesc, impl interface{})
}

type ClientConnInterface interface {
	Call(ctx context.Context, router *Router, in interface{}, out interface{}, opts ...interface{}) error
	Cast(ctx context.Context, router *Router, in interface{}, opts ...interface{}) error
}

type callHandler func(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error)
type castHandler func(srv interface{}, ctx context.Context, dec func(interface{}) error) error

//Thegreetingservicedefinition.
type GreeterSrv interface {
	//Sendsagreeting
	SayHello(context.Context, *pb.HelloRequest) (*pb.HelloReply, error)
	//Sendsagreeting1111
	SayHello1(context.Context, *pb.HelloRequest) error
	//
	SayHello2(context.Context, *pb.HelloRequest) error
}

// UnimGreeter must be embedded to have forward compatible implementations.
type UnimGreeterSrv struct {
}

//Sendsagreeting
func (*UnimGreeterSrv) SayHello(context.Context, *pb.HelloRequest) (*pb.HelloReply, error) {
	return nil, errors.New("method SayHello not implemented")
}

//Sendsagreeting1111
func (*UnimGreeterSrv) SayHello1(context.Context, *pb.HelloRequest) error {
	return errors.New("method SayHello1 not implemented")
}

//
func (*UnimGreeterSrv) SayHello2(context.Context, *pb.HelloRequest) error {
	return errors.New("method SayHello2 not implemented")
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(pb.HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(GreeterSrv).SayHello(ctx, in)
}
func _Greeter_SayHello1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) error {
	in := new(pb.HelloRequest)
	if err := dec(in); err != nil {
		return err
	}
	return srv.(GreeterSrv).SayHello1(ctx, in)
}

func _Greeter_SayHello2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) error {
	in := new(pb.HelloRequest)
	if err := dec(in); err != nil {
		return err
	}
	return srv.(GreeterSrv).SayHello2(ctx, in)
}

var Greeter_ServiceDesc = ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterSrv)(nil),
	Cmd:         0,
	Methods: []MethodDesc{
		{
			MethodName:  "SayHello",
			CallHandler: _Greeter_SayHello_Handler,
			Type:        CALL,
			Act:         0,
		},
		{
			MethodName:  "SayHello1",
			CastHandler: _Greeter_SayHello1_Handler,
			Type:        CAST,
			Act:         1,
		},
		{
			MethodName:  "SayHello2",
			CastHandler: _Greeter_SayHello2_Handler,
			Type:        CAST,
			Act:         2,
		},
	},
}

func RegisterGreeterSrv(s ServiceRegistrar, srv GreeterSrv) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

type GreeterCli interface {
	//Sendsagreeting
	SayHello(ctx context.Context, in *pb.HelloRequest, opts ...interface{}) (*pb.HelloReply, error)
	//Sendsagreeting1111
	SayHello1(ctx context.Context, in *pb.HelloRequest, opts ...interface{}) error
	//
	SayHello2(ctx context.Context, in *pb.HelloRequest, opts ...interface{}) error
}

type _GreeterCli struct {
	cc ClientConnInterface
}

func NewGreeterCli(cc ClientConnInterface) GreeterCli {
	return &_GreeterCli{cc}
}
func (c *_GreeterCli) SayHello(ctx context.Context, in *pb.HelloRequest, opts ...interface{}) (*pb.HelloReply, error) {
	out := new(pb.HelloReply)
	router := &Router{Url: "/Greeter/SayHello", Cmd: 0, Act: 0}
	err := c.cc.Call(ctx, router, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *_GreeterCli) SayHello1(ctx context.Context, in *pb.HelloRequest, opts ...interface{}) error {
	router := &Router{Url: "/Greeter/SayHello1", Cmd: 0, Act: 1}
	err := c.cc.Cast(ctx, router, in, opts...)
	return err
}
func (c *_GreeterCli) SayHello2(ctx context.Context, in *pb.HelloRequest, opts ...interface{}) error {
	router := &Router{Url: "/Greeter/SayHello2", Cmd: 0, Act: 2}
	err := c.cc.Cast(ctx, router, in, opts...)
	return err
}
